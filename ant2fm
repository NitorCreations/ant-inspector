#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;
use Carp; $SIG{ __DIE__ } = sub { Carp::confess( @_ ) }; # die now prints stacktrace

use XML::Easy::Text qw( xml10_read_document xml10_write_element );
use File::Spec;
use Config::Properties;
use Getopt::Long;

sub slurpAndApplyEntities($) {
    undef $/;
    open F, '-|', 'xmllint', '--dtdattr', '--noent', '--dropdtd', $_[0] or die $_[0];
    my $file = <F>;
    close F;
    return $file;
}

sub slurpxml($) {
    return xml10_read_document(slurpAndApplyEntities($_[0]));
}

sub children($) {
    my @children;
    my $arr = $_[0]->content_twine;
    for (my $i=1; $i<=$#$arr; $i+=2) {
	push @children, $arr->[$i];
    }
    return \@children;
}

sub resolve($$) {
    my ($a, $property) = @_;
    my $res = $a->{properties}->{$property};
    return $res;
}

sub expand($$) {
    my ($a,$x) = @_;
    die unless(defined($a) && defined($x));
    $x =~ s!(\$\{([^\$\}]+)\})!my $r=resolve($a, $2);defined($r)?$r:$1!ge;
    return $x;
}

sub parseTarget($$) {
    my ($a, $elem) = @_;
    return { file => $a->{file}, deps => $elem->attribute("depends"), steps => children($elem) };
}

sub parseMacro($$) {
    my ($a, $elem) = @_;
    my @attrs;
    my $sequential;
    foreach my $elem (@{children($elem)}) {
	my $name  = $elem->type_name;
	if ($name eq 'attribute') {
	    push @attrs, { name => $elem->attribute("name"), default => $elem->attribute("default") };
	} elsif ($name eq 'sequential') {
	    die if(defined($sequential));
	    $sequential = children($elem);
	}
    }

    return { file => $a->{file}, attributes => \@attrs, steps => $sequential };
}

sub dirof($) {
    my $x = $_[0];
    return $x =~ s!/[^/]+$!! ? $x : '.';
}

sub merge($$$) {
    my ($d,$dk,$s) = @_;
    foreach my $k (keys(%$s)) {
	unless(defined($d->{$dk}->{$k})) {
	    $d->{$dk}->{$k} = $s->{$k};
	}
    }
}

sub runSteps($$$);

my %typeIcons;

sub parse($$$);
sub parse($$$) {
    my $file = $_[0];
    my $parent = $_[1];
    my $overrideProperties = $_[2];

    print '<node TEXT="parse ',xe($file =~ s!.*/!!r),'">';
    print '<icon BUILTIN="',$typeIcons{parse},'"/>';

    $file = File::Spec->rel2abs($file);

    my $a = {};

    $a->{file} = $file;

    #print "=== PARSING $file ===\n";
    my $xml = slurpxml($file);

    if (defined($parent)) {
	$a->{overrideProperties} = $parent->{overrideProperties};
	$a->{properties} = $parent->{properties};
	$a->{steps} = $parent->{steps};
    } else {
	$a->{overrideProperties} = $overrideProperties;
	$a->{properties} = { %$overrideProperties };
	$a->{properties}->{"ant.file"} = $file;
	$a->{properties}->{"basedir"} = File::Spec->rel2abs($xml->attribute("basedir") || dirof($file));
	$a->{properties}->{"ant.project.default-target"} = $xml->attribute("default");
    }

    my $projectName = $xml->attribute("name");
    if(defined($projectName)) {
	$a->{properties}->{"ant.file.".$projectName} = $file;
	$a->{properties}->{"ant.project.name"} = $projectName;
    }

    runSteps($a, children($xml), undef);

    print '</node>';

    return $a;
}

my @icons = qw(idea help yes messagebox_warning stop-sign closed info button_ok button_cancel full-1 full-2 full-3 full-4 full-5 full-6 full-7 full-8 full-9 full-0 stop prepare go back forward up down attach ksmiletris smiley-neutral smiley-oh smiley-angry smily_bad clanbomber desktop_new gohome folder korn Mail kmail list edit kaddressbook knotify password pencil wizard xmag bell bookmark penguin licq freemind_butterfly broken-line calendar clock hourglass launch flag-black flag-blue flag-green flag-orange flag-pink flag flag-yellow family female1 female2 male1 male2 fema group);

my $typeIconCount = 0;
foreach my $type (qw(target child arg parse targetdef macrodef description)) {
    $typeIcons{$type} = $icons[$typeIconCount++];
}

$typeIcons{'step'} = 'forward';
$typeIcons{'echo'} = 'list';

sub xe($) {
    my $s = $_[0];
    $s =~ s!&!\&amp;!g;
    $s =~ s!\"!\&quot;!g;
    $s =~ s!<!\&lt;!g;
    $s =~ s!>!\&gt;!g;
    return $s;
}

sub resolveArg($$) {
    my ($args, $property) = @_;
    my $res = $args->{$property};
    return $res;
}

sub expandArg($$$) {
    my ($a,$args,$x) = @_;
    $x =~ s!(\@\{([^\$\}]+)\})!my $r=resolveArg($args, $2);defined($r)?$r:$1!ge if (defined($args));
    $x = expand($a,$x);
    return $x;
}

sub withExpand($$) {
    my ($orig,$expanded) = @_;
    return $orig eq $expanded ? $orig : $expanded."\n‚áê ".$orig;
}

sub printExpand($$$$$) {
    my ($prefix,$expanded,$suffix,$orig,$type) = @_;
    print '<node TEXT="',xe($prefix.$expanded.$suffix),'">';
    print '<icon BUILTIN="',$typeIcons{$type},'"/>';
    print '<node TEXT="',xe($orig),'"/>' if ($orig ne $expanded);
    print '</node>';
}

sub printArg($$$$$) {
    my ($a,$args,$prefix,$arg,$val) = @_;
    my $expanded = expandArg($a, $args, $val);
    printExpand($prefix.$arg.' = ',$expanded,'',$val,'arg');
}

sub printChild($$$) {
    my ($a,$args,$child) = @_;
    my $val = xml10_write_element($child);
    my $expanded = expandArg($a,$args,$val);
    printExpand('',$expanded,'',$val,'child');
}

sub importProps($$$$$) {
    my ($a,$props,$keys,$prefix,$isExpand) = @_;
    foreach my $propname (@$keys) {
	my $propval = $props->{$propname};
	$propname = $prefix.$propname;
	my $expanded = $isExpand ? expand($a,$propval) : $propval;
	my $propprefix = "";
	my $propsuffix = "";
	if (!defined($a->{properties}->{$propname})) {
	    $a->{properties}->{$propname} = $expanded;
	} elsif ($a->{properties}->{$propname} eq $expanded) {
	    $propprefix = "REDUNDANT ";
	} else {
	    $propprefix = "IGNORED ";
	    $propsuffix = ", retaining value ".$a->{properties}->{$propname};
	}
	printExpand($propprefix.'setProperty '.$propname.' = ',$expanded,$propsuffix,$propval,'step');
    }
}

sub runSteps($$$) {
    my ($a, $steps, $args) = @_;

    ## TODO $a->{file} references are wrong after target execution starts

    foreach my $step (@$steps) {
	my $name = $step->type_name;
	if ($name eq "import") {
	    my $importfile = expandArg($a, $args, $step->attribute("file"));
	    $importfile = dirof($a->{file}) . '/' . $importfile unless($importfile =~ m!^/!);
	    my $imported = parse($importfile, $a, undef);
	    push @{$a->{imports}}, $imported;
	    #print "=== DONE $importfile, RESUMING $a->{file} ===\n";
	} elsif ($name eq "property") {
	    if (defined($step->attribute("name"))) {
		my $propname = $step->attribute("name");
		my $propval = $step->attribute("value") || $step->attribute("location") or die Dumper($step);
		my $expanded = expandArg($a, $args, $propval);
		if ($expanded =~ m!\$\{!) {
		    print STDERR "$propname : $propval -> $expanded\n";
		}
		my $propprefix = "";
		my $propsuffix = "";
		if (!defined($a->{properties}->{$propname})) {
		    $a->{properties}->{$propname} = $expanded;
		} elsif ($a->{properties}->{$propname} eq $expanded) {
		    $propprefix = "REDUNDANT ";
		} else {
		    $propprefix = "IGNORED ";
		    $propsuffix = ", retaining value ".$a->{properties}->{$propname};
		}
		printExpand($propprefix.'setProperty '.$propname.' = ',$expanded,$propsuffix,$propval,'step');
	    } elsif (defined($step->attribute("environment"))) {
		my $envprefix = $step->attribute("environment").".";
		print '<node TEXT="importPropertiesFromEnvironment">';
		print '<icon BUILTIN="',$typeIcons{'step'},'"/>';
		my @keys = sort keys %ENV;
		importProps($a,\%ENV,\@keys,$envprefix,0);
		print '</node>';
	    } elsif (defined($step->attribute("file"))) {
		my $ofile = $step->attribute("file");
		my $file = expandArg($a,$args,$ofile);
		$file = $file =~ m!^/! ? $file : $a->{properties}->{"basedir"}.'/'.$file;
		print '<node TEXT="importPropertiesFromFile ', xe(withExpand($ofile,$file)),'">';
		print '<icon BUILTIN="',$typeIcons{'step'},'"/>';
		my $props = Config::Properties->new(file => $file);
		my %propsHash = $props->properties;
		my @propertyNames = $props->propertyNames;
		importProps($a,\%propsHash,\@propertyNames,'',1);
		print '</node>';
	    } else {
		die Dumper($step);
	    }

	} elsif ($name eq "target") {
	    $a->{targets}->{$step->attribute("name")} = parseTarget($a, $step);
	    print '<node TEXT="defineTarget ',xe($step->attribute("name")),'">';
	    print '<icon BUILTIN="',$typeIcons{targetdef},'"/>';
	    print '</node>';
	} elsif ($name eq "macrodef") {
	    $a->{macros}->{$step->attribute("name")} = parseMacro($a, $step);
	    print '<node TEXT="defineMacro ',xe($step->attribute("name")),'">';
	    print '<icon BUILTIN="',$typeIcons{macrodef},'"/>';
	    print '</node>';
	} elsif ($name eq 'ant') {
	    my $ofile = $step->attribute('antfile') || 'build.xml';
	    my $file = expandArg($a,$args,$ofile);
	    print '<node TEXT="ant ',xe(withExpand($ofile,$file)),'">';
	    print '<icon BUILTIN="',$typeIcons{step},'"/>';
	    $file = $a->{properties}->{"basedir"}.'/'.$file unless($file =~ m!^/!);
	    my $subAnt = parse($file, undef, $a->{overrideProperties});
	    my $targetName = $step->attribute('target') || $subAnt->{properties}->{"ant.project.default-target"};
	    if (defined($targetName)) {
		run($subAnt, $targetName);
	    } else {
		print '<node TEXT="ERROR: Target ',xe($targetName),' not found"/>';
		print STDERR "WARNING: Target $targetName not found $file\n";
	    }
	    print '</node>';
	} elsif ($name eq 'antcall') {
	    my $file = $a->{properties}->{"ant.file"};
	    print '<node TEXT="antcall">';
	    print '<icon BUILTIN="',$typeIcons{step},'"/>';
	    my $subAnt = parse($file, undef, $a->{overrideProperties});
	    my $targetName = $step->attribute('target') || $subAnt->{properties}->{"ant.project.default-target"};
	    if (defined($targetName)) {
		run($subAnt, $targetName);
	    } else {
		print '<node TEXT="ERROR: Target ',xe($targetName),' not found"/>';
		print STDERR "WARNING: Target $targetName not found $file\n";
	    }
	    print '</node>';
	} elsif ($name eq 'if') {
	    # TODO ifelse
	    my $then;
	    my $else;
	    my $condition;
	    foreach my $child (@{children($step)}) {
		my $n = $child->type_name;
		if ($n eq 'then') {
		    $then = children($child);
		} elsif($n eq 'else') {
		    $else = children($child);
		} elsif($n eq 'equals') {
		    $condition = 'equals("'.$child->attribute('arg1').'","'.$child->attribute('arg2').'")';
		} elsif($n eq 'available') {
		    $condition = 'available("'.$child->attribute('file').'","'.$child->attribute('type').'")';
		} elsif($n eq 'istrue') {
		    $condition = 'istrue('.$child->attribute('value').')';
		} else {
		    die "Unsupported condition:".Dumper($child);
		}
	    }

	    my $expanded = expandArg($a, $args, $condition);
	    print '<node TEXT="if ',xe(withExpand($condition, $expanded)),'">';
	    print '<node TEXT="then">';
	    runSteps($a, $then, $args);
	    print '</node>';
	    if(defined($else)) {
		print '<node TEXT="else">';
		runSteps($a, $else, $args);
		print '</node>';
	    }
	    print '</node>';
	} elsif ($name eq 'for') {
	    my $oparam = $step->attribute('param');
	    my $param = expandArg($a,$args,$oparam);
	    print '<node TEXT="for ',xe(withExpand($oparam,$param)),'">';
	    print '<icon BUILTIN="',$typeIcons{step},'"/>';
	    foreach my $arg (keys %{$step->attributes}) {
		next if($arg eq 'param');
		printArg($a,$args,"",$arg,$step->attribute($arg));
	    }
	    foreach my $child (@{children($step)}) {
		my $n = $child->type_name;
		if ($n eq 'sequential') {
		    runSteps($a,children($child),$args);
		} else {
		    printChild($a,$args,$child);
		}
	    }
	    print '</node>';
	} elsif ($name eq "description") {
	    my $text = "";
	    my $children = $step->content_twine;
	    if (length(@$children) == 1 && length($children->[0] =~ s!^\s+!!r) > 0) {
		$text = $children->[0] =~ s!^\s+!!r;
		$text =~ s!\s+$!!;
	    }
	    print '<node TEXT="',xe($text),'">';
	    print '<icon BUILTIN="',$typeIcons{description},'"/>';
	    print '</node>';
	} elsif ($name eq 'echo') {
	    my $text = $step->attribute("message");
	    my $children = $step->content_twine;
	    if (length(@$children) == 1 && length($children->[0] =~ s!^\s+!!r) > 0) {
		$text = $children->[0] =~ s!^\s+!!r;
		$text =~ s!\s+$!!;
	    }
	    my $expanded = expandArg($a,$args,$text);
	    printExpand('',$expanded,'',$text,'echo');
	} elsif ($name eq 'webtest') {
	    my $name = $step->attribute('name');
	    print '<node TEXT="webtest ',xe($name),'">';
	    print '<icon BUILTIN="',$typeIcons{step},'"/>';
	    runSteps($a,children($step),$args);
	    print '</node>';
	} else {
	    print '<node TEXT="',xe($name),'">';
	    print '<icon BUILTIN="',$typeIcons{step},'"/>';
	    foreach my $arg (keys %{$step->attributes}) {
		printArg($a,$args,"",$arg,$step->attribute($arg));
	    }
	    my $macro = $a->{macros}->{$name};
	    my %macroargs;
	    if (defined($macro)) {
		foreach my $attr (@{$macro->{attributes}}) {
		    my $val = $step->attribute($attr->{name});
		    if (defined($val)) {
		    } elsif (defined($attr->{default})) {
			$val = $attr->{default};
			printArg($a,undef,"DEFAULT ",$attr->{name},$val);
		    } else {
			printArg($a,undef,"MISSING ",$attr->{name},"");
		    }
		    my $expanded = expandArg($a, $args, $val);
		    $macroargs{$attr->{name}} = $expanded;
		}
	    }
	    foreach my $child (@{children($step)}) {
		printChild($a,$args,$child);
	    }
	    if (defined($macro)) {
		runSteps($a, $macro->{steps}, \%macroargs);
	    }
	    print '</node>';
	}
    }

    # TODO too late (if allowed at all) when executing targets
    foreach my $imp (@{$a->{imports}}) {
	merge($a, 'macros', $imp->{macros});
	merge($a, 'targets', $imp->{targets});
    }

    delete $a->{imports};
}

sub run($$);
sub run($$) {
    my ($a,$targetName) = @_;

    print '<node TEXT="',xe($targetName),'">';
    print '<icon BUILTIN="',$typeIcons{target},'"/>';

    my $target = $a->{targets}->{$targetName};

    if (defined($target)) {
	if (defined($target->{deps})) {
	    foreach my $dep (split(/,/, $target->{deps})) {
		run($a, $dep);
	    }
	}
	runSteps($a, $target->{steps}, undef);
    } else {
	print '<node TEXT="ERROR: Target ',xe($targetName),' not found"/>';
	print STDERR "WARNING: Target $targetName not found\n";
    }

    print '</node>';
}

my $help;
my $buildfile = 'build.xml';
my %props;

GetOptions('help|h' => \$help,
	   'f=s' => \$buildfile,
	   'D=s' => \%props,
    );

if ($help) {
    print STDERR "usage: $0 [<options>] [<target> [...]]

Options:
  -f <buildfile.xml>      default: build.xml
  -D <property>=<value>   example: -D build.env=prod
";
    exit (1);
}

unless (-f $buildfile) {
    print STDERR $buildfile," not found\n";
    exit(2);
}

print '<map version="1.0.1">';
print '<node TEXT="Execution tree">';
print '<node TEXT="Commandline arguments">';
foreach my $propname (sort keys %props) {
    printExpand('setProperty '.$propname.' = ',$props{$propname},'',$props{$propname},'step');
}
print '</node>';
my $a = parse($buildfile, undef, \%props);
if ($#ARGV >= 0) {
    foreach my $target (@ARGV) {
	run($a, $target);
    }
} else {
    my $target = $a->{properties}->{"ant.project.default-target"};
    if (defined($target)) {
	run($a, $target);
    } else {
	print '<node TEXT="NOTE: No default target"/>';
	print STDERR "No default target\n";
    }
}

print '<node POSITION="left" TEXT="Labels">';
foreach my $type (keys %typeIcons) {
    print '<node TEXT="',xe($type),'"><icon BUILTIN="',$typeIcons{$type},'"/></node>';
}
print '</node>';
print '</node>';
print "</map>\n";
